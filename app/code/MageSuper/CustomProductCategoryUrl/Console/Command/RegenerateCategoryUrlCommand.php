<?php
namespace MageSuper\CustomProductCategoryUrl\Console\Command;

use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Magento\UrlRewrite\Service\V1\Data\UrlRewrite;
use Magento\UrlRewrite\Model\UrlPersistInterface;
use MageSuper\CustomProductCategoryUrl\Model\CategoryUrlRewriteGenerator;
use Magento\Catalog\Model\ResourceModel\Category\Collection;
use Magento\Store\Model\Store;
use Magento\CatalogUrlRewrite\Model\Category\CanonicalUrlRewriteGenerator;
use Magento\Catalog\Api\CategoryRepositoryInterface;

class RegenerateCategoryUrlCommand extends Command
{
    /**
     * @var ProductUrlRewriteGenerator
     */
    protected $categoryUrlRewriteGenerator;

    /**
     * @var UrlPersistInterface
     */
    protected $urlPersist;

    /**
     * @var ProductRepositoryInterface
     */
    protected $collection;
    protected $productCollection;
    protected $state;
    protected $canonicalUrlRewriteGenerator;
    protected $categoryRepository;

    public function __construct(
        \Magento\Framework\App\State $state,
        Collection $collection,
        CategoryUrlRewriteGenerator $categoryUrlRewriteGenerator,
        UrlPersistInterface $urlPersist,
        CanonicalUrlRewriteGenerator $canonicalUrlRewriteGenerator,
        CategoryRepositoryInterface $categoryRepository
    )
    {
        $this->canonicalUrlRewriteGenerator = $canonicalUrlRewriteGenerator;
        $this->state = $state;
        $this->collection = $collection;
        $this->categoryUrlRewriteGenerator = $categoryUrlRewriteGenerator;
        $this->urlPersist = $urlPersist;
        $this->categoryRepository = $categoryRepository;
        parent::__construct();
    }

    protected function configure()
    {
        $this->setName('magesuper:fixcategoryurls')
            ->setDescription('Regenerate urls for categories');
        return parent::configure();
    }

    public function execute(InputInterface $inp, OutputInterface $out)
    {
        $this->state->setAreaCode('adminhtml');
        $connection = $this->collection->getConnection();

        $this->collection->addAttributeToSelect(['url_path', 'url_key'])->setStore(10);
        $ids = [];
        foreach ($this->collection as $product) {
            $ids[] = $product->getEntityId();
        }

        $select = $connection
            ->select()
            ->from(['u' => $connection->getTableName('url_rewrite')], ['u.entity_id', 'u.request_path'])
            ->where('u.is_autogenerated = 1')
            ->where('u.entity_type = ?', CategoryUrlRewriteGenerator::ENTITY_TYPE)
            ->where('u.store_id IN(10)')
            ->where('u.entity_id IN(?)', $ids)
            ->group('u.entity_id');

        $exist = $connection->fetchAll($select);
        foreach ($this->collection as $category) {
            if($category->getData('level')<2){
                continue;
            }
            $id = $category->getEntityId();
            $i = false;
            foreach ($exist as $url) {
                if ($url['entity_id'] == $id) {
                    $i = true;
                    break;
                }
            }
            if (!$i) {
                try{
                    $category->setData('store_id',0);
                    $urlRewrites = $this->categoryUrlRewriteGenerator->generate($category);
                    $this->urlPersist->replace($urlRewrites);
                } catch(\Exception $e){

                }
            }
        }
    }
}
